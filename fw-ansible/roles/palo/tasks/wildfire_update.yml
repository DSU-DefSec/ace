---
- name: wildfire_update | Check for wildfire update
  paloaltonetworks.panos.panos_op:
    provider: "{{ provider }}"
    cmd: request wildfire upgrade check
  register: check

- name: wildfire_update | Get wildfire info
  # Get the current wildfire version
  paloaltonetworks.panos.panos_op:
    provider: "{{ provider }}"
    cmd: request wildfire upgrade info
  register: info

- name: wildfire_update | Set fact for parsed JSON data
  ansible.builtin.set_fact:
    parsed_data: "{{ info.stdout | from_json }}"
- name: wildfire_update | Extract relevant details from parsed data
  when: parsed_data.response.result['content-updates'].entry.installed is defined
  ansible.builtin.set_fact:
    wildfire_updates: >-
      {{ parsed_data.response.result['content-updates'].entry
      | map(attribute='version')
      | list }}
    downloaded_updates: >-
      {{ parsed_data.response.result['content-updates'].entry
      | selectattr('downloaded', 'equalto', 'yes')
      | map(attribute='version')
      | list }}
    current_update: >-
      {{ parsed_data.response.result['content-updates'].entry
      | selectattr('current', 'equalto', 'yes')
      | map(attribute='version')
      | first
      | default() }}
    latest_update: >-
      {{ parsed_data.response.result['content-updates'].entry
      | sort(attribute='released-on', reverse=True)
      | map(attribute='version')
      | first }}

- name: wildfire_update | Show extracted data
  when: parsed_data.response.result['content-updates'].entry.installed is defined
  ansible.builtin.debug:
    msg:
      - "All Versions: {{ wildfire_updates }}"
      - "Downloaded Versions: {{ downloaded_updates }}"
      - "Current Version: {{ current_update }}"
      - "Latest Version: {{ latest_update }}"
      - "Need to download: {{ (latest_update != current_update) }}"

- name: wildfire_update | Download and Install
  when: (latest_update != current_update) or parsed_data.response.result['content-updates'].entry.installed is not defined
  block:
    - name: wildfire_update | Download latest content
      # Download the latest version
      paloaltonetworks.panos.panos_op:
        provider: "{{ provider }}"
        cmd: request wildfire upgrade download latest
      register: download

    - name: wildfire_update | Check content download result
      # wait for this job to finish
      paloaltonetworks.panos.panos_op:
        provider: "{{ provider }}"
        cmd: show jobs id {{ (download.stdout | from_json).response.result.job }}
      register: download_job
      until: download_job is not failed and (download_job.stdout | from_json).response.result.job.status == 'FIN'
      retries: 150
      delay: 2

    - name: wildfire_update | Install latest content
      # Content is downloaded and ready, now install it
      paloaltonetworks.panos.panos_op:
        provider: "{{ provider }}"
        cmd: request wildfire upgrade install version latest
      register: install

    - name: wildfire_update | Check content install result
      # again, wait for job to complete
      paloaltonetworks.panos.panos_op:
        provider: "{{ provider }}"
        cmd: show jobs id {{ (install.stdout | from_json).response.result.job }}
      register: install_job
      until: install_job is not failed and (install_job.stdout | from_json).response.result.job.status == 'FIN'
      retries: 150
      delay: 2
